service: manhuntgps

provider:
  name: aws
  runtime: python3.7
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  websocketsApiName: ${self:service}
  websocketsApiRouteSelectionExpression: $request.body.action
  environment:
    TABLE_NAME: ${self:service}-${self:provider.stage}-websockets
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - "arn:aws:dynamodb:*:*:table/${self:provider.environment.TABLE_NAME}"

plugins:
  - serverless-python-requirements
functions:
  updateLocation:
    handler: handler.updateLocation
    events:
      - websocket:
          route: updateLocation
  onConnect:
    handler: handler.onConnect
    events:
      - websocket:
          route: $connect
  onDisconnect:
    handler: handler.onDisconnect
    events:
      - websocket:
          route: $disconnect

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          -
            AttributeName: connectionId
            AttributeType: S
        KeySchema:
          -
            AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

custom:
  pythonRequirements:
    dockerizePip: true
    noDeploy: []
